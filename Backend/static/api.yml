openapi: 3.0.0
info:
  title: TicketShow
  description: API for managing venues and shows
  version: '1.0'
#Authorization: Bearer <token>



security:
  - bearerAuth: [ ]


paths:
  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: User's email

                password:
                  type: string
                  description: User's password

              required:
                - email
                - password
              example:
                email: admin@ticketShow
                password: admin
      responses:
        '200':
          description: Successful login

  /search/{query}:
    get:
      summary: Search for venues or shows
      parameters:
        - name: query
          in: path
          description: Search query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: ID of the result
                    name:
                      type: string
                      description: Name of the result
                    type:
                      type: string
                      description: Type of the result (venue or show)
                example:
                  - id: 1
                    name: Example Venue
                    type: venue
                  - id: 2
                    name: Example Show
                    type: show
  /api/bookings:
    get:
      summary: Get a list of all bookings
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: A list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Booking'

  /api/bookings/{booking_id}:
    get:
      summary: Retrieve booking details by ID
      parameters:
        - name: booking_id
          in: path
          description: ID of the booking to retrieve
          required: true
          schema:
            type: integer
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved booking details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
  /api/venues:
    get:
      summary: Get a list of all venues
      responses:
        '200':
          description: A list of venues
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'
    post:
      summary: Create a new venue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVenue'
      responses:
        '201':
          description: Created venue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
  /api/venues/{id}:
    get:
      summary: Get a venue by ID
      parameters:
        - name: id
          in: path
          description: Venue ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The venue with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '404':
          description: Venue not found
    put:
      summary: Update a venue by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewVenue'
      parameters:
        - name: id
          in: path
          description: Venue ID
          required: true
          schema:
            type: integer
#        - in: body
#          name: body
#          description: Updated venue object
#          required: true

      responses:
        '200':
          description: Updated venue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Venue'
        '404':
          description: Venue not found
    delete:
      summary: Delete a venue by ID
      parameters:
        - name: id
          in: path
          description: Venue ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Venue deleted
        '404':
          description: Venue not found
  /api/shows:
    get:
      summary: Get a list of all shows
      responses:
        '200':
          description: A list of Shows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shows'
    post:
      summary: Create a new show
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewShows'
      responses:
        '201':
          description: Created show
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shows'
  /api/shows/{id}:
    get:
      summary: Get a Show by ID
      parameters:
        - name: id
          in: path
          description: Show ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The show with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shows'
        '404':
          description: Show not found
    put:
      summary: Update a show by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewShows'
      parameters:
        - name: id
          in: path
          description: SHOW ID
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: Updated show
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shows'
        '404':
          description: Show not found
    delete:
      summary: Delete a show by ID
      parameters:
        - name: id
          in: path
          description: Show ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Show deleted
        '404':
          description: Show not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Venue:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the venue
        name:
          type: string
          description: The name of the venue
        place:
          type: string
          description: The place where the venue is located
        location:
          type: string
          description: The location of the venue
        capacity:
          type: integer
          description: The capacity of the venue
      required:
        - id
        - name
        - place
        - location
        - capacity
    NewVenue:
      type: object
      properties:
        name:
          type: string
          description: The name of the venue
        place:
          type: string
          description: The place where the venue is located
        location:
          type: string
          description: The location of the venue
        capacity:
          type: integer
          description: The capacity of the venue
      required:
        - name
        - place
        - location
        - capacity
    Shows:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the Show
        show_name:
          type: string
          description: The name of the Show
        rating:
          type: string
          description: Rating of the show (pg-13, R, etc)
        timing:
          type: string
          description: The timing of the show in ISO 8601 date-time format
        tags:
          type: string
          description: Tags (Adventure, Comedy, etc)
        yt_link:
          type: string
          description: Youtube Links
        price:
          type: integer
          description: The price for the show
        venue_id:
          type: integer
          description: The id of Venue
      required:
        - id
        - show_name
        - tags
        - price
        - yt_link
        - venue_id
    NewShows:
      type: object
      properties:
        show_name:
          type: string
          description: The name of the Show
        rating:
          type: string
          description: Rating of the show (pg-13, R, etc)
        yt_link:
          type: string
          description: Youtube Links
        timing:
          type: string
          format: date-time
          example: "2023-12-29T21:20"  # Custom example in the desired format
          description: The timing of the show in ISO 8601 date-time format
        tags:
          type: string
          description: Tags (Adventure, Comedy, etc)
        price:
          type: integer
          description: The price for the show
        venue_id:
          type: integer
          description: The id of Venue
      required:
        - yt_link
        - show_name
        - rating
        - timing
        - tags
        - price
        - venue_id
    Booking:
      type: object
      properties:
        id:
          type: integer
          example: 1
        rating:
          type: integer
          example: 4
        user_id:
          type: integer
          example: 12
        show_id:
          type: integer
          example: 45
        seat_booked:
          type: integer
          example: 78
        timing:
          type: string
          format: date-time
          example: "2023-08-11T12:13:09Z"
